{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0","program":"/Users/andonmitev/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","memchr","--edition=2018","/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"use_std\"","-C","metadata=24554d3d5cd75fa8","-C","extra-filename=-24554d3d5cd75fa8","--out-dir","/Users/andonmitev/Desktop/RUst/hello_world/target/rls/debug/deps","-L","dependency=/Users/andonmitev/Desktop/RUst/hello_world/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/andonmitev/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/andonmitev/Desktop/RUst/hello_world/target/rls/debug/deps/libmemchr-24554d3d5cd75fa8.rmeta"},"prelude":{"crate_id":{"name":"memchr","disambiguator":[4942651963355259795,17443887099364189760]},"crate_root":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src","external_crates":[{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6953153704133384382,11230793172500241849]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/cow.rs","num":2,"id":{"name":"core","disambiguator":[5677981802051829033,13623687576168491111]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12560447239807209171,6398585695143860785]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[12638775034072548080,6787576177321175622]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3743762522383775230,10045108273665421780]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16091063112996212369,11610638991537936703]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11693940743152699348,13392972289054827706]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17914957437356211762,10107084326163003549]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15573676571072571414,14269093709728855861]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12469906492453996505,933652555562277705]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7052149414613871245,14818678141461695257]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10500616641901135021,6169421002700461480]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[243686320259171084,9282031573790882050]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16840586979963248457,17899577842709795526]}},{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[9390337894408583044,6451986232102498129]}}],"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":0,"byte_end":6591,"line_start":1,"line_end":181,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":207},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6353,"byte_end":6359,"line_start":172,"line_end":172,"column_start":5,"column_end":11},"alias_span":null,"name":"memchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":209},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6361,"byte_end":6368,"line_start":172,"line_end":172,"column_start":13,"column_end":20},"alias_span":null,"name":"memchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":202},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6370,"byte_end":6382,"line_start":172,"line_end":172,"column_start":22,"column_end":34},"alias_span":null,"name":"memchr2_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6384,"byte_end":6391,"line_start":172,"line_end":172,"column_start":36,"column_end":43},"alias_span":null,"name":"memchr3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":203},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6393,"byte_end":6405,"line_start":172,"line_end":172,"column_start":45,"column_end":57},"alias_span":null,"name":"memchr3_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":201},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6407,"byte_end":6418,"line_start":172,"line_end":172,"column_start":59,"column_end":70},"alias_span":null,"name":"memchr_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":213},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6424,"byte_end":6431,"line_start":173,"line_end":173,"column_start":5,"column_end":12},"alias_span":null,"name":"memrchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":215},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6433,"byte_end":6441,"line_start":173,"line_end":173,"column_start":14,"column_end":22},"alias_span":null,"name":"memrchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":205},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6443,"byte_end":6456,"line_start":173,"line_end":173,"column_start":24,"column_end":37},"alias_span":null,"name":"memrchr2_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":217},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6458,"byte_end":6466,"line_start":173,"line_end":173,"column_start":39,"column_end":47},"alias_span":null,"name":"memrchr3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":206},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6468,"byte_end":6481,"line_start":173,"line_end":173,"column_start":49,"column_end":62},"alias_span":null,"name":"memrchr3_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":204},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6483,"byte_end":6495,"line_start":173,"line_end":173,"column_start":64,"column_end":76},"alias_span":null,"name":"memrchr_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":137},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6501,"byte_end":6507,"line_start":174,"line_end":174,"column_start":5,"column_end":11},"alias_span":null,"name":"Memchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":153},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6509,"byte_end":6516,"line_start":174,"line_end":174,"column_start":13,"column_end":20},"alias_span":null,"name":"Memchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6518,"byte_end":6525,"line_start":174,"line_end":174,"column_start":22,"column_end":29},"alias_span":null,"name":"Memchr3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":489},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":39693,"byte_end":39702,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"alias_span":null,"name":"Prefilter","value":"","parent":{"krate":0,"index":219}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":0,"byte_end":6591,"line_start":1,"line_end":181,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":68},{"krate":0,"index":219}],"decl_id":null,"docs":"This library provides heavily optimized routines for string search primitives.","sig":null,"attributes":[{"value":"*\nThis library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in libc. A key\nadvantage of using this library is that its performance is not tied to its\nquality of implementation in the libc you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64` targets have highly accelerated\nimplementations of substring search. For `memchr`, all targets have\nsomewhat-accelerated implementations, while only `x86_64` targets have highly\naccelerated implementations. This limitation is expected to be lifted once the\nstandard library exposes a platform independent SIMD API.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit this crate to use\n  features specific to the standard library. Currently, the only thing used\n  from the standard library is runtime SIMD CPU feature detection. This means\n  that this feature must be enabled to get AVX accelerated routines. When\n  `std` is not enabled, this crate will still attempt to use SSE2 accelerated\n  routines on `x86_64`.\n* **libc** - When enabled (**not** the default), this library will use your\n  platform's libc implementation of `memchr` (and `memrchr` on Linux). This\n  can be useful on non-`x86_64` targets where the fallback implementation in\n  this crate is not as good as the one found in your libc. All other routines\n  (e.g., `memchr[23]` and substring search) unconditionally use the\n  implementation in this crate.\n*/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":0,"byte_end":5778,"line_start":1,"line_end":154,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":5780,"byte_end":5802,"line_start":156,"line_end":156,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":137},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":33522,"byte_end":33528,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"Memchr","qualname":"::memchr::iter::Memchr","value":"Memchr {  }","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141}],"decl_id":null,"docs":" An iterator for `memchr`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":33481,"byte_end":33510,"line_start":33,"line_end":33,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":33779,"byte_end":33782,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr>::new","value":"pub fn new(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":33678,"byte_end":33753,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":33758,"byte_end":33767,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":153},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34431,"byte_end":34438,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"Memchr2","qualname":"::memchr::iter::Memchr2","value":"Memchr2 {  }","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"decl_id":null,"docs":" An iterator for `memchr2`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr2`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34389,"byte_end":34419,"line_start":71,"line_end":71,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34708,"byte_end":34711,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr2>::new","value":"pub fn new(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34607,"byte_end":34682,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34687,"byte_end":34696,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":170},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":35521,"byte_end":35528,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"Memchr3","qualname":"::memchr::iter::Memchr3","value":"Memchr3 {  }","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"decl_id":null,"docs":" An iterator for `memchr3`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr3`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":35479,"byte_end":35509,"line_start":118,"line_end":118,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":35809,"byte_end":35812,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr3>::new","value":"pub fn new(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Memchr3` that's initialized to zero with a haystack\n","sig":null,"attributes":[{"value":"/ Create a new `Memchr3` that's initialized to zero with a haystack","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":35714,"byte_end":35783,"line_start":130,"line_end":130,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":35788,"byte_end":35797,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":9598,"byte_end":9609,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"memchr_iter","qualname":"::memchr::memchr_iter","value":"pub fn memchr_iter(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":9515,"byte_end":9580,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":9581,"byte_end":9590,"line_start":16,"line_end":16,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":202},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":9776,"byte_end":9788,"line_start":23,"line_end":23,"column_start":8,"column_end":20},"name":"memchr2_iter","qualname":"::memchr::memchr2_iter","value":"pub fn memchr2_iter(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":9692,"byte_end":9758,"line_start":21,"line_end":21,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":9759,"byte_end":9768,"line_start":22,"line_end":22,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":9981,"byte_end":9993,"line_start":29,"line_end":29,"column_start":8,"column_end":20},"name":"memchr3_iter","qualname":"::memchr::memchr3_iter","value":"pub fn memchr3_iter(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":9897,"byte_end":9963,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":9964,"byte_end":9973,"line_start":28,"line_end":28,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":204},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10238,"byte_end":10250,"line_start":40,"line_end":40,"column_start":8,"column_end":20},"name":"memrchr_iter","qualname":"::memchr::memrchr_iter","value":"pub fn memrchr_iter(u8, &[u8]) -> Rev<Memchr>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack, in reverse.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10143,"byte_end":10220,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10221,"byte_end":10230,"line_start":39,"line_end":39,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10440,"byte_end":10453,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"memrchr2_iter","qualname":"::memchr::memrchr2_iter","value":"pub fn memrchr2_iter(u8, u8, &[u8]) -> Rev<Memchr2>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10344,"byte_end":10422,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10423,"byte_end":10432,"line_start":45,"line_end":45,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":206},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10684,"byte_end":10697,"line_start":56,"line_end":56,"column_start":8,"column_end":21},"name":"memrchr3_iter","qualname":"::memchr::memrchr3_iter","value":"pub fn memrchr3_iter(u8, u8, u8, &[u8]) -> Rev<Memchr3>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10588,"byte_end":10666,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10667,"byte_end":10676,"line_start":55,"line_end":55,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":207},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11604,"byte_end":11610,"line_start":87,"line_end":87,"column_start":8,"column_end":14},"name":"memchr","qualname":"::memchr::memchr","value":"pub fn memchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the first occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the first occurrence of a byte in a slice.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10858,"byte_end":10915,"line_start":65,"line_end":65,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10916,"byte_end":10919,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle` in","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":10920,"byte_end":10999,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ `haystack`, or `None` if one is not found. If an index is returned, it is","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11000,"byte_end":11077,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ guaranteed to be less than `usize::MAX`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11078,"byte_end":11122,"line_start":69,"line_end":69,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11123,"byte_end":11126,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11127,"byte_end":11185,"line_start":71,"line_end":71,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle)`, `memchr` will use a highly","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11186,"byte_end":11262,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11263,"byte_end":11339,"line_start":73,"line_end":73,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11340,"byte_end":11350,"line_start":74,"line_end":74,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11351,"byte_end":11354,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11355,"byte_end":11368,"line_start":76,"line_end":76,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11369,"byte_end":11372,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of a byte in a byte string.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11373,"byte_end":11446,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11447,"byte_end":11450,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11451,"byte_end":11458,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11459,"byte_end":11482,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11483,"byte_end":11486,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11487,"byte_end":11529,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr(b'k', haystack), Some(8));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11530,"byte_end":11578,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11579,"byte_end":11586,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":11587,"byte_end":11596,"line_start":86,"line_end":86,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13457,"byte_end":13464,"line_start":151,"line_end":151,"column_start":8,"column_end":15},"name":"memchr2","qualname":"::memchr::memchr2","value":"pub fn memchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":12576,"byte_end":12652,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":12653,"byte_end":12656,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":12657,"byte_end":12734,"line_start":129,"line_end":129,"column_start":1,"column_end":78}},{"value":"/ or the first occurrence of `needle2` in `haystack` (whichever occurs","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":12735,"byte_end":12807,"line_start":130,"line_end":130,"column_start":1,"column_end":73}},{"value":"/ earlier), or `None` if neither one is found. If an index is returned, it is","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":12808,"byte_end":12887,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ guaranteed to be less than `usize::MAX`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":12888,"byte_end":12932,"line_start":132,"line_end":132,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":12933,"byte_end":12936,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":12937,"byte_end":12995,"line_start":134,"line_end":134,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2)`, `memchr2`","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":12996,"byte_end":13072,"line_start":135,"line_end":135,"column_start":1,"column_end":77}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13073,"byte_end":13152,"line_start":136,"line_end":136,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13153,"byte_end":13178,"line_start":137,"line_end":137,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13179,"byte_end":13182,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13183,"byte_end":13196,"line_start":139,"line_end":139,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13197,"byte_end":13200,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of either of two bytes in a byte","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13201,"byte_end":13279,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ string.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13280,"byte_end":13291,"line_start":142,"line_end":142,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13292,"byte_end":13295,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13296,"byte_end":13303,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr2;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13304,"byte_end":13328,"line_start":145,"line_end":145,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13329,"byte_end":13332,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13333,"byte_end":13375,"line_start":147,"line_end":147,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr2(b'k', b'q', haystack), Some(4));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13376,"byte_end":13431,"line_start":148,"line_end":148,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13432,"byte_end":13439,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":13440,"byte_end":13449,"line_start":150,"line_end":150,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":15157,"byte_end":15164,"line_start":204,"line_end":204,"column_start":8,"column_end":15},"name":"memchr3","qualname":"::memchr::memchr3","value":"pub fn memchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14225,"byte_end":14300,"line_start":180,"line_end":180,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14301,"byte_end":14304,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`,","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14305,"byte_end":14383,"line_start":182,"line_end":182,"column_start":1,"column_end":79}},{"value":"/ the first occurrence of `needle2`, or the first occurrence of `needle3` in","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14384,"byte_end":14462,"line_start":183,"line_end":183,"column_start":1,"column_end":79}},{"value":"/ `haystack` (whichever occurs earliest), or `None` if none are found. If an","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14463,"byte_end":14541,"line_start":184,"line_end":184,"column_start":1,"column_end":79}},{"value":"/ index is returned, it is guaranteed to be less than `usize::MAX`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14542,"byte_end":14611,"line_start":185,"line_end":185,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14612,"byte_end":14615,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14616,"byte_end":14674,"line_start":187,"line_end":187,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14675,"byte_end":14741,"line_start":188,"line_end":188,"column_start":1,"column_end":67}},{"value":"/ b == needle3)`, `memchr3` will use a highly optimized routine that can be","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14742,"byte_end":14819,"line_start":189,"line_end":189,"column_start":1,"column_end":78}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14820,"byte_end":14873,"line_start":190,"line_end":190,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14874,"byte_end":14877,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14878,"byte_end":14891,"line_start":192,"line_end":192,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14892,"byte_end":14895,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of any of three bytes in a byte","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14896,"byte_end":14973,"line_start":194,"line_end":194,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14974,"byte_end":14985,"line_start":195,"line_end":195,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14986,"byte_end":14989,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14990,"byte_end":14997,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr3;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":14998,"byte_end":15022,"line_start":198,"line_end":198,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":15023,"byte_end":15026,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":15027,"byte_end":15069,"line_start":200,"line_end":200,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr3(b'k', b'q', b'e', haystack), Some(2));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":15070,"byte_end":15131,"line_start":201,"line_end":201,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":15132,"byte_end":15139,"line_start":202,"line_end":202,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":15140,"byte_end":15149,"line_start":203,"line_end":203,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16750,"byte_end":16757,"line_start":260,"line_end":260,"column_start":8,"column_end":15},"name":"memrchr","qualname":"::memchr::memrchr","value":"pub fn memrchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the last occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the last occurrence of a byte in a slice.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16002,"byte_end":16058,"line_start":238,"line_end":238,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16059,"byte_end":16062,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle` in","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16063,"byte_end":16141,"line_start":240,"line_end":240,"column_start":1,"column_end":79}},{"value":"/ `haystack`, or `None` if one is not found. If an index is returned, it is","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16142,"byte_end":16219,"line_start":241,"line_end":241,"column_start":1,"column_end":78}},{"value":"/ guaranteed to be less than `usize::MAX`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16220,"byte_end":16264,"line_start":242,"line_end":242,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16265,"byte_end":16268,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16269,"byte_end":16327,"line_start":244,"line_end":244,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle)`, `memrchr` will use a highly","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16328,"byte_end":16406,"line_start":245,"line_end":245,"column_start":1,"column_end":79}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16407,"byte_end":16483,"line_start":246,"line_end":246,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16484,"byte_end":16494,"line_start":247,"line_end":247,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16495,"byte_end":16498,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16499,"byte_end":16512,"line_start":249,"line_end":249,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16513,"byte_end":16516,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of a byte in a byte string.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16517,"byte_end":16589,"line_start":251,"line_end":251,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16590,"byte_end":16593,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16594,"byte_end":16601,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16602,"byte_end":16626,"line_start":254,"line_end":254,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16627,"byte_end":16630,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16631,"byte_end":16673,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr(b'o', haystack), Some(17));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16674,"byte_end":16724,"line_start":257,"line_end":257,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16725,"byte_end":16732,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":16733,"byte_end":16742,"line_start":259,"line_end":259,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":215},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18662,"byte_end":18670,"line_start":325,"line_end":325,"column_start":8,"column_end":16},"name":"memrchr2","qualname":"::memchr::memrchr2","value":"pub fn memrchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":17781,"byte_end":17858,"line_start":301,"line_end":301,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":17859,"byte_end":17862,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1` or","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":17863,"byte_end":17942,"line_start":303,"line_end":303,"column_start":1,"column_end":80}},{"value":"/ the last occurrence of `needle2` in `haystack` (whichever occurs later), or","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":17943,"byte_end":18022,"line_start":304,"line_end":304,"column_start":1,"column_end":80}},{"value":"/ `None` if neither one is found. If an index is returned, it is guaranteed","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18023,"byte_end":18100,"line_start":305,"line_end":305,"column_start":1,"column_end":78}},{"value":"/ to be less than `usize::MAX`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18101,"byte_end":18134,"line_start":306,"line_end":306,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18135,"byte_end":18138,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18139,"byte_end":18197,"line_start":308,"line_end":308,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, `memrchr2`","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18198,"byte_end":18276,"line_start":309,"line_end":309,"column_start":1,"column_end":79}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18277,"byte_end":18356,"line_start":310,"line_end":310,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18357,"byte_end":18382,"line_start":311,"line_end":311,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18383,"byte_end":18386,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18387,"byte_end":18400,"line_start":313,"line_end":313,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18401,"byte_end":18404,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of either of two bytes in a byte","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18405,"byte_end":18482,"line_start":315,"line_end":315,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18483,"byte_end":18494,"line_start":316,"line_end":316,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18495,"byte_end":18498,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18499,"byte_end":18506,"line_start":318,"line_end":318,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr2;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18507,"byte_end":18532,"line_start":319,"line_end":319,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18533,"byte_end":18536,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18537,"byte_end":18579,"line_start":321,"line_end":321,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr2(b'k', b'q', haystack), Some(8));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18580,"byte_end":18636,"line_start":322,"line_end":322,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18637,"byte_end":18644,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":18645,"byte_end":18654,"line_start":324,"line_end":324,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20364,"byte_end":20372,"line_start":378,"line_end":378,"column_start":8,"column_end":16},"name":"memrchr3","qualname":"::memchr::memrchr3","value":"pub fn memrchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19434,"byte_end":19510,"line_start":354,"line_end":354,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19511,"byte_end":19514,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1`,","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19515,"byte_end":19592,"line_start":356,"line_end":356,"column_start":1,"column_end":78}},{"value":"/ the last occurrence of `needle2`, or the last occurrence of `needle3` in","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19593,"byte_end":19669,"line_start":357,"line_end":357,"column_start":1,"column_end":77}},{"value":"/ `haystack` (whichever occurs later), or `None` if none are found. If an","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19670,"byte_end":19745,"line_start":358,"line_end":358,"column_start":1,"column_end":76}},{"value":"/ index is returned, it is guaranteed to be less than `usize::MAX`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19746,"byte_end":19815,"line_start":359,"line_end":359,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19816,"byte_end":19819,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19820,"byte_end":19878,"line_start":361,"line_end":361,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19879,"byte_end":19946,"line_start":362,"line_end":362,"column_start":1,"column_end":68}},{"value":"/ b == needle3)`, `memrchr3` will use a highly optimized routine that can be","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":19947,"byte_end":20025,"line_start":363,"line_end":363,"column_start":1,"column_end":79}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20026,"byte_end":20079,"line_start":364,"line_end":364,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20080,"byte_end":20083,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20084,"byte_end":20097,"line_start":366,"line_end":366,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20098,"byte_end":20101,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of any of three bytes in a byte","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20102,"byte_end":20178,"line_start":368,"line_end":368,"column_start":1,"column_end":77}},{"value":"/ string.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20179,"byte_end":20190,"line_start":369,"line_end":369,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20191,"byte_end":20194,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20195,"byte_end":20202,"line_start":371,"line_end":371,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr3;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20203,"byte_end":20228,"line_start":372,"line_end":372,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20229,"byte_end":20232,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20233,"byte_end":20275,"line_start":374,"line_end":374,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr3(b'k', b'q', b'e', haystack), Some(8));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20276,"byte_end":20338,"line_start":375,"line_end":375,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20339,"byte_end":20346,"line_start":376,"line_end":376,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/mod.rs","byte_start":20347,"byte_end":20356,"line_start":377,"line_end":377,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":219},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"memmem","qualname":"::memmem","value":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":302},{"krate":0,"index":321},{"krate":0,"index":328},{"krate":0,"index":363},{"krate":0,"index":367},{"krate":0,"index":371},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":613},{"krate":0,"index":620},{"krate":0,"index":377},{"krate":0,"index":381},{"krate":0,"index":624},{"krate":0,"index":630},{"krate":0,"index":386},{"krate":0,"index":390},{"krate":0,"index":634},{"krate":0,"index":640},{"krate":0,"index":637},{"krate":0,"index":395},{"krate":0,"index":643},{"krate":0,"index":649},{"krate":0,"index":646},{"krate":0,"index":406},{"krate":0,"index":652},{"krate":0,"index":658},{"krate":0,"index":656},{"krate":0,"index":654},{"krate":0,"index":418},{"krate":0,"index":660},{"krate":0,"index":669},{"krate":0,"index":666},{"krate":0,"index":672},{"krate":0,"index":678},{"krate":0,"index":677},{"krate":0,"index":675},{"krate":0,"index":680},{"krate":0,"index":687},{"krate":0,"index":686},{"krate":0,"index":684},{"krate":0,"index":682},{"krate":0,"index":689},{"krate":0,"index":700},{"krate":0,"index":698},{"krate":0,"index":427},{"krate":0,"index":440},{"krate":0,"index":702},{"krate":0,"index":710},{"krate":0,"index":707},{"krate":0,"index":713},{"krate":0,"index":724},{"krate":0,"index":722},{"krate":0,"index":442}],"decl_id":null,"docs":"This module provides forward and reverse substring search routines.","sig":null,"attributes":[{"value":"*\nThis module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n*/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":37494,"byte_end":39666,"line_start":1,"line_end":67,"column_start":1,"column_end":3}}]},{"kind":"TupleVariant","id":{"krate":0,"index":490},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92380,"byte_end":92384,"line_start":155,"line_end":155,"column_start":5,"column_end":9},"name":"None","qualname":"::memmem::prefilter::Prefilter::None","value":"Prefilter::None","parent":{"krate":0,"index":489},"children":[],"decl_id":null,"docs":" Never used a prefilter in substring search.\n","sig":null,"attributes":[{"value":"/ Never used a prefilter in substring search.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92328,"byte_end":92375,"line_start":154,"line_end":154,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":492},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92611,"byte_end":92615,"line_start":159,"line_end":159,"column_start":5,"column_end":9},"name":"Auto","qualname":"::memmem::prefilter::Prefilter::Auto","value":"Prefilter::Auto","parent":{"krate":0,"index":489},"children":[],"decl_id":null,"docs":" Automatically detect whether a heuristic prefilter should be used. If\n it is used, then heuristics will be used to dynamically disable the\n prefilter if it is believed to not be carrying its weight.\n","sig":null,"attributes":[{"value":"/ Automatically detect whether a heuristic prefilter should be used. If","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92390,"byte_end":92463,"line_start":156,"line_end":156,"column_start":5,"column_end":78}},{"value":"/ it is used, then heuristics will be used to dynamically disable the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92468,"byte_end":92539,"line_start":157,"line_end":157,"column_start":5,"column_end":76}},{"value":"/ prefilter if it is believed to not be carrying its weight.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92544,"byte_end":92606,"line_start":158,"line_end":158,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":489},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92312,"byte_end":92321,"line_start":153,"line_end":153,"column_start":10,"column_end":19},"name":"Prefilter","qualname":"::memmem::prefilter::Prefilter","value":"pub enum Prefilter { None, Auto, }","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":492}],"decl_id":null,"docs":" Prefilter controls whether heuristics are used to accelerate searching.","sig":null,"attributes":[{"value":"/ Prefilter controls whether heuristics are used to accelerate searching.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":90815,"byte_end":90890,"line_start":126,"line_end":126,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":90891,"byte_end":90894,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ A prefilter refers to the idea of detecting candidate matches very quickly,","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":90895,"byte_end":90974,"line_start":128,"line_end":128,"column_start":1,"column_end":80}},{"value":"/ and then confirming whether those candidates are full matches. This","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":90975,"byte_end":91046,"line_start":129,"line_end":129,"column_start":1,"column_end":72}},{"value":"/ idea can be quite effective since it's often the case that looking for","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91047,"byte_end":91121,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/ candidates can be a lot faster than running a complete substring search","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91122,"byte_end":91197,"line_start":131,"line_end":131,"column_start":1,"column_end":76}},{"value":"/ over the entire input. Namely, looking for candidates can be done with","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91198,"byte_end":91272,"line_start":132,"line_end":132,"column_start":1,"column_end":75}},{"value":"/ extremely fast vectorized code.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91273,"byte_end":91308,"line_start":133,"line_end":133,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91309,"byte_end":91312,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ The downside of a prefilter is that it assumes false positives (which are","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91313,"byte_end":91390,"line_start":135,"line_end":135,"column_start":1,"column_end":78}},{"value":"/ candidates generated by a prefilter that aren't matches) are somewhat rare","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91391,"byte_end":91469,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ relative to the frequency of full matches. That is, if a lot of false","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91470,"byte_end":91543,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/ positives are generated, then it's possible for search time to be worse","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91544,"byte_end":91619,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/ than if the prefilter wasn't enabled in the first place.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91620,"byte_end":91680,"line_start":139,"line_end":139,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91681,"byte_end":91684,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ Another downside of a prefilter is that it can result in highly variable","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91685,"byte_end":91761,"line_start":141,"line_end":141,"column_start":1,"column_end":77}},{"value":"/ performance, where some cases are extraordinarily fast and others aren't.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91762,"byte_end":91839,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/ Typically, variable performance isn't a problem, but it may be for your use","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91840,"byte_end":91919,"line_start":143,"line_end":143,"column_start":1,"column_end":80}},{"value":"/ case.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91920,"byte_end":91929,"line_start":144,"line_end":144,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91930,"byte_end":91933,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ The use of prefilters in this implementation does use a heuristic to detect","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":91934,"byte_end":92013,"line_start":146,"line_end":146,"column_start":1,"column_end":80}},{"value":"/ when a prefilter might not be carrying its weight, and will dynamically","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92014,"byte_end":92089,"line_start":147,"line_end":147,"column_start":1,"column_end":76}},{"value":"/ disable its use. Nevertheless, this configuration option gives callers","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92090,"byte_end":92164,"line_start":148,"line_end":148,"column_start":1,"column_end":75}},{"value":"/ the ability to disable pefilters if you have knowledge that they won't be","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92165,"byte_end":92242,"line_start":149,"line_end":149,"column_start":1,"column_end":78}},{"value":"/ useful.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92243,"byte_end":92254,"line_start":150,"line_end":150,"column_start":1,"column_end":12}},{"value":"non_exhaustive","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92285,"byte_end":92302,"line_start":152,"line_end":152,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":367},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43073,"byte_end":43082,"line_start":188,"line_end":188,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::memmem::find_iter","value":"pub fn find_iter<'h, 'n, N: 'n + ?Sized + AsRef<[u8]>>(&'h [u8], &'n N)\n-> FindIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all occurrences of a substring in a haystack.","sig":null,"attributes":[{"value":"/ Returns an iterator over all occurrences of a substring in a haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42345,"byte_end":42419,"line_start":162,"line_end":162,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42420,"byte_end":42423,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42424,"byte_end":42440,"line_start":164,"line_end":164,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42441,"byte_end":42444,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42445,"byte_end":42517,"line_start":166,"line_end":166,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42518,"byte_end":42590,"line_start":167,"line_end":167,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42591,"byte_end":42638,"line_start":168,"line_end":168,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42639,"byte_end":42642,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42643,"byte_end":42712,"line_start":170,"line_end":170,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42713,"byte_end":42728,"line_start":171,"line_end":171,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42729,"byte_end":42732,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42733,"byte_end":42747,"line_start":173,"line_end":173,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42748,"byte_end":42751,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42752,"byte_end":42768,"line_start":175,"line_end":175,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42769,"byte_end":42772,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42773,"byte_end":42780,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42781,"byte_end":42804,"line_start":178,"line_end":178,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42805,"byte_end":42808,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42809,"byte_end":42851,"line_start":180,"line_end":180,"column_start":1,"column_end":43}},{"value":"/ let mut it = memmem::find_iter(haystack, b\"foo\");","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42852,"byte_end":42905,"line_start":181,"line_end":181,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42906,"byte_end":42941,"line_start":182,"line_end":182,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42942,"byte_end":42977,"line_start":183,"line_end":183,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":42978,"byte_end":43014,"line_start":184,"line_end":184,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43015,"byte_end":43047,"line_start":185,"line_end":185,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43048,"byte_end":43055,"line_start":186,"line_end":186,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43056,"byte_end":43065,"line_start":187,"line_end":187,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":371},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43981,"byte_end":43991,"line_start":222,"line_end":222,"column_start":8,"column_end":18},"name":"rfind_iter","qualname":"::memmem::rfind_iter","value":"pub fn rfind_iter<'h, 'n, N: 'n + ?Sized + AsRef<[u8]>>(&'h [u8], &'n N)\n-> FindRevIter","parent":null,"children":[],"decl_id":null,"docs":" Returns a reverse iterator over all occurrences of a substring in a\n haystack.","sig":null,"attributes":[{"value":"/ Returns a reverse iterator over all occurrences of a substring in a","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43241,"byte_end":43312,"line_start":195,"line_end":195,"column_start":1,"column_end":72}},{"value":"/ haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43313,"byte_end":43326,"line_start":196,"line_end":196,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43327,"byte_end":43330,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43331,"byte_end":43347,"line_start":198,"line_end":198,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43348,"byte_end":43351,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43352,"byte_end":43424,"line_start":200,"line_end":200,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43425,"byte_end":43497,"line_start":201,"line_end":201,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43498,"byte_end":43545,"line_start":202,"line_end":202,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43546,"byte_end":43549,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43550,"byte_end":43619,"line_start":204,"line_end":204,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43620,"byte_end":43635,"line_start":205,"line_end":205,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43636,"byte_end":43639,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43640,"byte_end":43654,"line_start":207,"line_end":207,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43655,"byte_end":43658,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43659,"byte_end":43675,"line_start":209,"line_end":209,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43676,"byte_end":43679,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43680,"byte_end":43687,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43688,"byte_end":43711,"line_start":212,"line_end":212,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43712,"byte_end":43715,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43716,"byte_end":43758,"line_start":214,"line_end":214,"column_start":1,"column_end":43}},{"value":"/ let mut it = memmem::rfind_iter(haystack, b\"foo\");","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43759,"byte_end":43813,"line_start":215,"line_end":215,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43814,"byte_end":43850,"line_start":216,"line_end":216,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43851,"byte_end":43886,"line_start":217,"line_end":217,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43887,"byte_end":43922,"line_start":218,"line_end":218,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43923,"byte_end":43955,"line_start":219,"line_end":219,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43956,"byte_end":43963,"line_start":220,"line_end":220,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":43964,"byte_end":43973,"line_start":221,"line_end":221,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":375},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45029,"byte_end":45033,"line_start":257,"line_end":257,"column_start":8,"column_end":12},"name":"find","qualname":"::memmem::find","value":"pub fn find(&[u8], &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44159,"byte_end":44225,"line_start":229,"line_end":229,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44226,"byte_end":44229,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ Note that if you're are searching for the same needle in many different","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44230,"byte_end":44305,"line_start":231,"line_end":231,"column_start":1,"column_end":76}},{"value":"/ small haystacks, it may be faster to initialize a [`Finder`] once,","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44306,"byte_end":44376,"line_start":232,"line_end":232,"column_start":1,"column_end":71}},{"value":"/ and reuse it for each search.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44377,"byte_end":44410,"line_start":233,"line_end":233,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44411,"byte_end":44414,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44415,"byte_end":44431,"line_start":235,"line_end":235,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44432,"byte_end":44435,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44436,"byte_end":44508,"line_start":237,"line_end":237,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44509,"byte_end":44581,"line_start":238,"line_end":238,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44582,"byte_end":44629,"line_start":239,"line_end":239,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44630,"byte_end":44633,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44634,"byte_end":44703,"line_start":241,"line_end":241,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44704,"byte_end":44719,"line_start":242,"line_end":242,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44720,"byte_end":44723,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44724,"byte_end":44738,"line_start":244,"line_end":244,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44739,"byte_end":44742,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44743,"byte_end":44759,"line_start":246,"line_end":246,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44760,"byte_end":44763,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44764,"byte_end":44771,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44772,"byte_end":44795,"line_start":249,"line_end":249,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44796,"byte_end":44799,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44800,"byte_end":44834,"line_start":251,"line_end":251,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(Some(0), memmem::find(haystack, b\"foo\"));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44835,"byte_end":44891,"line_start":252,"line_end":252,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(Some(4), memmem::find(haystack, b\"bar\"));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44892,"byte_end":44948,"line_start":253,"line_end":253,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(None, memmem::find(haystack, b\"quux\"));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":44949,"byte_end":45003,"line_start":254,"line_end":254,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45004,"byte_end":45011,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45012,"byte_end":45021,"line_start":256,"line_end":256,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":376},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46153,"byte_end":46158,"line_start":294,"line_end":294,"column_start":8,"column_end":13},"name":"rfind","qualname":"::memmem::rfind","value":"pub fn rfind(&[u8], &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45221,"byte_end":45286,"line_start":265,"line_end":265,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45287,"byte_end":45290,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ Note that if you're are searching for the same needle in many different","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45291,"byte_end":45366,"line_start":267,"line_end":267,"column_start":1,"column_end":76}},{"value":"/ small haystacks, it may be faster to initialize a [`FinderRev`] once,","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45367,"byte_end":45440,"line_start":268,"line_end":268,"column_start":1,"column_end":74}},{"value":"/ and reuse it for each search.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45441,"byte_end":45474,"line_start":269,"line_end":269,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45475,"byte_end":45478,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45479,"byte_end":45495,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45496,"byte_end":45499,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45500,"byte_end":45572,"line_start":273,"line_end":273,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45573,"byte_end":45645,"line_start":274,"line_end":274,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45646,"byte_end":45693,"line_start":275,"line_end":275,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45694,"byte_end":45697,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45698,"byte_end":45767,"line_start":277,"line_end":277,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45768,"byte_end":45783,"line_start":278,"line_end":278,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45784,"byte_end":45787,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45788,"byte_end":45802,"line_start":280,"line_end":280,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45803,"byte_end":45806,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45807,"byte_end":45823,"line_start":282,"line_end":282,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45824,"byte_end":45827,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45828,"byte_end":45835,"line_start":284,"line_end":284,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45836,"byte_end":45859,"line_start":285,"line_end":285,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45860,"byte_end":45863,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45864,"byte_end":45898,"line_start":287,"line_end":287,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45899,"byte_end":45956,"line_start":288,"line_end":288,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":45957,"byte_end":46014,"line_start":289,"line_end":289,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46015,"byte_end":46071,"line_start":290,"line_end":290,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(None, memmem::rfind(haystack, b\"quux\"));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46072,"byte_end":46127,"line_start":291,"line_end":291,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46128,"byte_end":46135,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46136,"byte_end":46145,"line_start":293,"line_end":293,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":613},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46595,"byte_end":46603,"line_start":309,"line_end":309,"column_start":12,"column_end":20},"name":"FindIter","qualname":"::memmem::FindIter","value":"FindIter {  }","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46351,"byte_end":46406,"line_start":302,"line_end":302,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46407,"byte_end":46410,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46411,"byte_end":46475,"line_start":304,"line_end":304,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46476,"byte_end":46479,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ `'h` is the lifetime of the haystack while `'n` is the lifetime of the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46480,"byte_end":46554,"line_start":306,"line_end":306,"column_start":1,"column_end":75}},{"value":"/ needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46555,"byte_end":46566,"line_start":307,"line_end":307,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":624},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":47828,"byte_end":47839,"line_start":356,"line_end":356,"column_start":12,"column_end":23},"name":"FindRevIter","qualname":"::memmem::FindRevIter","value":"FindRevIter {  }","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches in reverse.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches in reverse.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":47573,"byte_end":47639,"line_start":349,"line_end":349,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":47640,"byte_end":47643,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":47644,"byte_end":47708,"line_start":351,"line_end":351,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":47709,"byte_end":47712,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ `'h` is the lifetime of the haystack while `'n` is the lifetime of the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":47713,"byte_end":47787,"line_start":353,"line_end":353,"column_start":1,"column_end":75}},{"value":"/ needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":47788,"byte_end":47799,"line_start":354,"line_end":354,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":634},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49689,"byte_end":49695,"line_start":412,"line_end":412,"column_start":12,"column_end":18},"name":"Finder","qualname":"::memmem::Finder","value":"Finder {  }","parent":null,"children":[{"krate":0,"index":636}],"decl_id":null,"docs":" A single substring searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring searcher fixed to a particular needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":48896,"byte_end":48957,"line_start":398,"line_end":398,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":48958,"byte_end":48961,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":48962,"byte_end":49036,"line_start":400,"line_end":400,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49037,"byte_end":49110,"line_start":401,"line_end":401,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49111,"byte_end":49185,"line_start":402,"line_end":402,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49186,"byte_end":49262,"line_start":403,"line_end":403,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49263,"byte_end":49341,"line_start":404,"line_end":404,"column_start":1,"column_end":79}},{"value":"/ [`find`] is good enough, but `Finder` is useful when you can meaningfully","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49342,"byte_end":49419,"line_start":405,"line_end":405,"column_start":1,"column_end":78}},{"value":"/ observe searcher construction time in a profile.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49420,"byte_end":49472,"line_start":406,"line_end":406,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49473,"byte_end":49476,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49477,"byte_end":49550,"line_start":408,"line_end":408,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `Finder` that is not connected to","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49551,"byte_end":49621,"line_start":409,"line_end":409,"column_start":1,"column_end":71}},{"value":"/ the lifetime of its needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49622,"byte_end":49653,"line_start":410,"line_end":410,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49830,"byte_end":49833,"line_start":419,"line_end":419,"column_start":12,"column_end":15},"name":"new","qualname":"<Finder>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'n B) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new finder for the given needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49759,"byte_end":49804,"line_start":417,"line_end":417,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49809,"byte_end":49818,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50761,"byte_end":50765,"line_start":447,"line_end":447,"column_start":12,"column_end":16},"name":"find","qualname":"<Finder>::find","value":"pub fn find(&Self, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of this needle in the given","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49952,"byte_end":50025,"line_start":423,"line_end":423,"column_start":5,"column_end":78}},{"value":"/ haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50030,"byte_end":50043,"line_start":424,"line_end":424,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50048,"byte_end":50051,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50056,"byte_end":50072,"line_start":426,"line_end":426,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50077,"byte_end":50080,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50085,"byte_end":50157,"line_start":428,"line_end":428,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50162,"byte_end":50234,"line_start":429,"line_end":429,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50239,"byte_end":50286,"line_start":430,"line_end":430,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50291,"byte_end":50294,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50299,"byte_end":50368,"line_start":432,"line_end":432,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50373,"byte_end":50388,"line_start":433,"line_end":433,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50393,"byte_end":50396,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50401,"byte_end":50415,"line_start":435,"line_end":435,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50420,"byte_end":50423,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50428,"byte_end":50444,"line_start":437,"line_end":437,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50449,"byte_end":50452,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50457,"byte_end":50464,"line_start":439,"line_end":439,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::Finder;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50469,"byte_end":50500,"line_start":440,"line_end":440,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50505,"byte_end":50508,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50513,"byte_end":50547,"line_start":442,"line_end":442,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Some(0), Finder::new(\"foo\").find(haystack));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50552,"byte_end":50611,"line_start":443,"line_end":443,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Some(4), Finder::new(\"bar\").find(haystack));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50616,"byte_end":50675,"line_start":444,"line_end":444,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(None, Finder::new(\"quux\").find(haystack));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50680,"byte_end":50737,"line_start":445,"line_end":445,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50742,"byte_end":50749,"line_start":446,"line_end":446,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51768,"byte_end":51777,"line_start":478,"line_end":478,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Finder>::find_iter","value":"pub fn find_iter<'a, 'h>(&'a Self, &'h [u8]) -> FindIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all occurrences of a substring in a haystack.","sig":null,"attributes":[{"value":"/ Returns an iterator over all occurrences of a substring in a haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50895,"byte_end":50969,"line_start":451,"line_end":451,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50974,"byte_end":50977,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":50982,"byte_end":50998,"line_start":453,"line_end":453,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51003,"byte_end":51006,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51011,"byte_end":51083,"line_start":455,"line_end":455,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51088,"byte_end":51160,"line_start":456,"line_end":456,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51165,"byte_end":51212,"line_start":457,"line_end":457,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51217,"byte_end":51220,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51225,"byte_end":51294,"line_start":459,"line_end":459,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51299,"byte_end":51314,"line_start":460,"line_end":460,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51319,"byte_end":51322,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51327,"byte_end":51341,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51346,"byte_end":51349,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51354,"byte_end":51370,"line_start":464,"line_end":464,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51375,"byte_end":51378,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51383,"byte_end":51390,"line_start":466,"line_end":466,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::Finder;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51395,"byte_end":51426,"line_start":467,"line_end":467,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51431,"byte_end":51434,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51439,"byte_end":51481,"line_start":469,"line_end":469,"column_start":5,"column_end":47}},{"value":"/ let finder = Finder::new(b\"foo\");","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51486,"byte_end":51523,"line_start":470,"line_end":470,"column_start":5,"column_end":42}},{"value":"/ let mut it = finder.find_iter(haystack);","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51528,"byte_end":51572,"line_start":471,"line_end":471,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51577,"byte_end":51612,"line_start":472,"line_end":472,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51617,"byte_end":51652,"line_start":473,"line_end":473,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51657,"byte_end":51693,"line_start":474,"line_end":474,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51698,"byte_end":51730,"line_start":475,"line_end":475,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51735,"byte_end":51742,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51747,"byte_end":51756,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52262,"byte_end":52272,"line_start":494,"line_end":494,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Finder>::into_owned","value":"pub fn into_owned(Self) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51919,"byte_end":51989,"line_start":485,"line_end":485,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":51994,"byte_end":52017,"line_start":486,"line_end":486,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52022,"byte_end":52025,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52030,"byte_end":52102,"line_start":488,"line_end":488,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52107,"byte_end":52134,"line_start":489,"line_end":489,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52139,"byte_end":52142,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52147,"byte_end":52208,"line_start":491,"line_end":491,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52213,"byte_end":52236,"line_start":492,"line_end":492,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52241,"byte_end":52250,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52943,"byte_end":52949,"line_start":509,"line_end":509,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Finder>::as_ref","value":"pub fn as_ref(&Self) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its borrowed variant.","sig":null,"attributes":[{"value":"/ Convert this finder into its borrowed variant.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52367,"byte_end":52417,"line_start":498,"line_end":498,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52422,"byte_end":52425,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ This is primarily useful if your finder is owned and you'd like to","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52430,"byte_end":52500,"line_start":500,"line_end":500,"column_start":5,"column_end":75}},{"value":"/ store its borrowed variant in some intermediate data structure.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52505,"byte_end":52572,"line_start":501,"line_end":501,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52577,"byte_end":52580,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime parameter of the returned finder is tied to the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52585,"byte_end":52659,"line_start":503,"line_end":503,"column_start":5,"column_end":79}},{"value":"/ lifetime of `self`, and may be shorter than the `'n` lifetime of the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52664,"byte_end":52736,"line_start":504,"line_end":504,"column_start":5,"column_end":77}},{"value":"/ needle itself. Namely, a finder's needle can be either borrowed or","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52741,"byte_end":52811,"line_start":505,"line_end":505,"column_start":5,"column_end":75}},{"value":"/ owned, so the lifetime of the needle returned must necessarily be the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52816,"byte_end":52889,"line_start":506,"line_end":506,"column_start":5,"column_end":78}},{"value":"/ shorter of the two.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52894,"byte_end":52917,"line_start":507,"line_end":507,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":52922,"byte_end":52931,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53425,"byte_end":53431,"line_start":520,"line_end":520,"column_start":12,"column_end":18},"name":"needle","qualname":"<Finder>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53036,"byte_end":53089,"line_start":513,"line_end":513,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53094,"byte_end":53097,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53102,"byte_end":53175,"line_start":515,"line_end":515,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'n` lifetime. Namely, a","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53180,"byte_end":53251,"line_start":516,"line_end":516,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53256,"byte_end":53331,"line_start":517,"line_end":517,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53336,"byte_end":53399,"line_start":518,"line_end":518,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53404,"byte_end":53413,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":643},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54298,"byte_end":54307,"line_start":539,"line_end":539,"column_start":12,"column_end":21},"name":"FinderRev","qualname":"::memmem::FinderRev","value":"FinderRev {  }","parent":null,"children":[{"krate":0,"index":645}],"decl_id":null,"docs":" A single substring reverse searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring reverse searcher fixed to a particular needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53490,"byte_end":53559,"line_start":525,"line_end":525,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53560,"byte_end":53563,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53564,"byte_end":53638,"line_start":527,"line_end":527,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53639,"byte_end":53712,"line_start":528,"line_end":528,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53713,"byte_end":53787,"line_start":529,"line_end":529,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53788,"byte_end":53864,"line_start":530,"line_end":530,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general,","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53865,"byte_end":53937,"line_start":531,"line_end":531,"column_start":1,"column_end":73}},{"value":"/ using [`rfind`] is good enough, but `FinderRev` is useful when you can","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":53938,"byte_end":54012,"line_start":532,"line_end":532,"column_start":1,"column_end":75}},{"value":"/ meaningfully observe searcher construction time in a profile.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54013,"byte_end":54078,"line_start":533,"line_end":533,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54079,"byte_end":54082,"line_start":534,"line_end":534,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54083,"byte_end":54156,"line_start":535,"line_end":535,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `FinderRev` that is not connected to","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54157,"byte_end":54230,"line_start":536,"line_end":536,"column_start":1,"column_end":74}},{"value":"/ the lifetime of its needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54231,"byte_end":54262,"line_start":537,"line_end":537,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54456,"byte_end":54459,"line_start":546,"line_end":546,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderRev>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'n B) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Create a new reverse finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new reverse finder for the given needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54377,"byte_end":54430,"line_start":544,"line_end":544,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54435,"byte_end":54444,"line_start":545,"line_end":545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55561,"byte_end":55566,"line_start":577,"line_end":577,"column_start":12,"column_end":17},"name":"rfind","qualname":"<FinderRev>::rfind","value":"pub fn rfind<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of this needle in the given","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54581,"byte_end":54653,"line_start":550,"line_end":550,"column_start":5,"column_end":77}},{"value":"/ haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54658,"byte_end":54671,"line_start":551,"line_end":551,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54676,"byte_end":54679,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54684,"byte_end":54753,"line_start":553,"line_end":553,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54758,"byte_end":54828,"line_start":554,"line_end":554,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54833,"byte_end":54836,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54841,"byte_end":54857,"line_start":556,"line_end":556,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54862,"byte_end":54865,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54870,"byte_end":54942,"line_start":558,"line_end":558,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54947,"byte_end":55019,"line_start":559,"line_end":559,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55024,"byte_end":55071,"line_start":560,"line_end":560,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55076,"byte_end":55079,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55084,"byte_end":55153,"line_start":562,"line_end":562,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55158,"byte_end":55173,"line_start":563,"line_end":563,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55178,"byte_end":55181,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55186,"byte_end":55200,"line_start":565,"line_end":565,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55205,"byte_end":55208,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55213,"byte_end":55229,"line_start":567,"line_end":567,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55234,"byte_end":55237,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55242,"byte_end":55249,"line_start":569,"line_end":569,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::FinderRev;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55254,"byte_end":55288,"line_start":570,"line_end":570,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55293,"byte_end":55296,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55301,"byte_end":55335,"line_start":572,"line_end":572,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55340,"byte_end":55403,"line_start":573,"line_end":573,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55408,"byte_end":55471,"line_start":574,"line_end":574,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55476,"byte_end":55537,"line_start":575,"line_end":575,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55542,"byte_end":55549,"line_start":576,"line_end":576,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56575,"byte_end":56585,"line_start":609,"line_end":609,"column_start":12,"column_end":22},"name":"rfind_iter","qualname":"<FinderRev>::rfind_iter","value":"pub fn rfind_iter<'a, 'h>(&'a Self, &'h [u8]) -> FindRevIter","parent":null,"children":[],"decl_id":null,"docs":" Returns a reverse iterator over all occurrences of a substring in a\n haystack.","sig":null,"attributes":[{"value":"/ Returns a reverse iterator over all occurrences of a substring in a","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55680,"byte_end":55751,"line_start":581,"line_end":581,"column_start":5,"column_end":76}},{"value":"/ haystack.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55756,"byte_end":55769,"line_start":582,"line_end":582,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55774,"byte_end":55777,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55782,"byte_end":55798,"line_start":584,"line_end":584,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55803,"byte_end":55806,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55811,"byte_end":55883,"line_start":586,"line_end":586,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55888,"byte_end":55960,"line_start":587,"line_end":587,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":55965,"byte_end":56012,"line_start":588,"line_end":588,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56017,"byte_end":56020,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56025,"byte_end":56094,"line_start":590,"line_end":590,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56099,"byte_end":56114,"line_start":591,"line_end":591,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56119,"byte_end":56122,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56127,"byte_end":56141,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56146,"byte_end":56149,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56154,"byte_end":56170,"line_start":595,"line_end":595,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56175,"byte_end":56178,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56183,"byte_end":56190,"line_start":597,"line_end":597,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::FinderRev;","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56195,"byte_end":56229,"line_start":598,"line_end":598,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56234,"byte_end":56237,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56242,"byte_end":56284,"line_start":600,"line_end":600,"column_start":5,"column_end":47}},{"value":"/ let finder = FinderRev::new(b\"foo\");","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56289,"byte_end":56329,"line_start":601,"line_end":601,"column_start":5,"column_end":45}},{"value":"/ let mut it = finder.rfind_iter(haystack);","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56334,"byte_end":56379,"line_start":602,"line_end":602,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56384,"byte_end":56420,"line_start":603,"line_end":603,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56425,"byte_end":56460,"line_start":604,"line_end":604,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56465,"byte_end":56500,"line_start":605,"line_end":605,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56505,"byte_end":56537,"line_start":606,"line_end":606,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56542,"byte_end":56549,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56554,"byte_end":56563,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57076,"byte_end":57086,"line_start":625,"line_end":625,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<FinderRev>::into_owned","value":"pub fn into_owned(Self) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56733,"byte_end":56803,"line_start":616,"line_end":616,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56808,"byte_end":56831,"line_start":617,"line_end":617,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56836,"byte_end":56839,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56844,"byte_end":56916,"line_start":619,"line_end":619,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56921,"byte_end":56948,"line_start":620,"line_end":620,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56953,"byte_end":56956,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":56961,"byte_end":57022,"line_start":622,"line_end":622,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57027,"byte_end":57050,"line_start":623,"line_end":623,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57055,"byte_end":57064,"line_start":624,"line_end":624,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57763,"byte_end":57769,"line_start":640,"line_end":640,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FinderRev>::as_ref","value":"pub fn as_ref(&Self) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its borrowed variant.","sig":null,"attributes":[{"value":"/ Convert this finder into its borrowed variant.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57187,"byte_end":57237,"line_start":629,"line_end":629,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57242,"byte_end":57245,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ This is primarily useful if your finder is owned and you'd like to","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57250,"byte_end":57320,"line_start":631,"line_end":631,"column_start":5,"column_end":75}},{"value":"/ store its borrowed variant in some intermediate data structure.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57325,"byte_end":57392,"line_start":632,"line_end":632,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57397,"byte_end":57400,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime parameter of the returned finder is tied to the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57405,"byte_end":57479,"line_start":634,"line_end":634,"column_start":5,"column_end":79}},{"value":"/ lifetime of `self`, and may be shorter than the `'n` lifetime of the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57484,"byte_end":57556,"line_start":635,"line_end":635,"column_start":5,"column_end":77}},{"value":"/ needle itself. Namely, a finder's needle can be either borrowed or","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57561,"byte_end":57631,"line_start":636,"line_end":636,"column_start":5,"column_end":75}},{"value":"/ owned, so the lifetime of the needle returned must necessarily be the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57636,"byte_end":57709,"line_start":637,"line_end":637,"column_start":5,"column_end":78}},{"value":"/ shorter of the two.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57714,"byte_end":57737,"line_start":638,"line_end":638,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57742,"byte_end":57751,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58251,"byte_end":58257,"line_start":651,"line_end":651,"column_start":12,"column_end":18},"name":"needle","qualname":"<FinderRev>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57862,"byte_end":57915,"line_start":644,"line_end":644,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57920,"byte_end":57923,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":57928,"byte_end":58001,"line_start":646,"line_end":646,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'n` lifetime. Namely, a","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58006,"byte_end":58077,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58082,"byte_end":58157,"line_start":648,"line_end":648,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58162,"byte_end":58225,"line_start":649,"line_end":649,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58230,"byte_end":58239,"line_start":650,"line_end":650,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":652},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58646,"byte_end":58659,"line_start":662,"line_end":662,"column_start":12,"column_end":25},"name":"FinderBuilder","qualname":"::memmem::FinderBuilder","value":"FinderBuilder {  }","parent":null,"children":[{"krate":0,"index":653}],"decl_id":null,"docs":" A builder for constructing non-default forward or reverse memmem finders.","sig":null,"attributes":[{"value":"/ A builder for constructing non-default forward or reverse memmem finders.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58316,"byte_end":58393,"line_start":656,"line_end":656,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58394,"byte_end":58397,"line_start":657,"line_end":657,"column_start":1,"column_end":4}},{"value":"/ A builder is primarily useful for configuring a substring searcher.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58398,"byte_end":58469,"line_start":658,"line_end":658,"column_start":1,"column_end":72}},{"value":"/ Currently, the only configuration exposed is the ability to disable","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58470,"byte_end":58541,"line_start":659,"line_end":659,"column_start":1,"column_end":72}},{"value":"/ heuristic prefilters used to speed up certain searches.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58542,"byte_end":58601,"line_start":660,"line_end":660,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58784,"byte_end":58787,"line_start":668,"line_end":668,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderBuilder>::new","value":"pub fn new() -> FinderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder builder with default settings.\n","sig":null,"attributes":[{"value":"/ Create a new finder builder with default settings.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58718,"byte_end":58772,"line_start":667,"line_end":667,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58949,"byte_end":58962,"line_start":674,"line_end":674,"column_start":12,"column_end":25},"name":"build_forward","qualname":"<FinderBuilder>::build_forward","value":"pub fn build_forward<'n, B: ?Sized + AsRef<[u8]>>(&Self, &'n B) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Build a forward finder using the given needle from the current\n settings.\n","sig":null,"attributes":[{"value":"/ Build a forward finder using the given needle from the current","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58853,"byte_end":58919,"line_start":672,"line_end":672,"column_start":5,"column_end":71}},{"value":"/ settings.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58924,"byte_end":58937,"line_start":673,"line_end":673,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":59233,"byte_end":59246,"line_start":683,"line_end":683,"column_start":12,"column_end":25},"name":"build_reverse","qualname":"<FinderBuilder>::build_reverse","value":"pub fn build_reverse<'n, B: ?Sized + AsRef<[u8]>>(&Self, &'n B) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Build a reverse finder using the given needle from the current\n settings.\n","sig":null,"attributes":[{"value":"/ Build a reverse finder using the given needle from the current","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":59137,"byte_end":59203,"line_start":681,"line_end":681,"column_start":5,"column_end":71}},{"value":"/ settings.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":59208,"byte_end":59221,"line_start":682,"line_end":682,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":59605,"byte_end":59614,"line_start":694,"line_end":694,"column_start":12,"column_end":21},"name":"prefilter","qualname":"<FinderBuilder>::prefilter","value":"pub fn prefilter(&mut Self, Prefilter) -> &mut FinderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the prefilter setting for the finder.","sig":null,"attributes":[{"value":"/ Configure the prefilter setting for the finder.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":59417,"byte_end":59468,"line_start":690,"line_end":690,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":59473,"byte_end":59476,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ See the documentation for [`Prefilter`] for more discussion on why","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":59481,"byte_end":59551,"line_start":692,"line_end":692,"column_start":5,"column_end":75}},{"value":"/ you might want to configure this.","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":59556,"byte_end":59593,"line_start":693,"line_end":693,"column_start":5,"column_end":42}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/cow.rs","byte_start":7402,"byte_end":7410,"line_start":26,"line_end":26,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/cow.rs","byte_start":7537,"byte_end":7545,"line_start":35,"line_end":35,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/cow.rs","byte_start":8627,"byte_end":8630,"line_start":70,"line_end":70,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":33661,"byte_end":33667,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":33926,"byte_end":33932,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34234,"byte_end":34240,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34589,"byte_end":34596,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34948,"byte_end":34955,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":35273,"byte_end":35280,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":35696,"byte_end":35703,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":36131,"byte_end":36138,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":36504,"byte_end":36511,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":86877,"byte_end":86880,"line_start":29,"line_end":29,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":89677,"byte_end":89688,"line_start":93,"line_end":93,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":90684,"byte_end":90695,"line_start":120,"line_end":120,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92637,"byte_end":92646,"line_start":162,"line_end":162,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92719,"byte_end":92728,"line_start":168,"line_end":168,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":93992,"byte_end":94006,"line_start":199,"line_end":199,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/rabinkarp.rs","byte_start":117659,"byte_end":117669,"line_start":115,"line_end":115,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/rabinkarp.rs","byte_start":118971,"byte_end":118975,"line_start":157,"line_end":157,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/rarebytes.rs","byte_start":123350,"byte_end":123365,"line_start":37,"line_end":37,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":131190,"byte_end":131197,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":136880,"byte_end":136887,"line_start":244,"line_end":244,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":141684,"byte_end":141690,"line_start":383,"line_end":383,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":143778,"byte_end":143783,"line_start":429,"line_end":429,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":146365,"byte_end":146371,"line_start":495,"line_end":495,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":151514,"byte_end":151524,"line_start":623,"line_end":623,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":152601,"byte_end":152619,"line_start":650,"line_end":650,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46724,"byte_end":46732,"line_start":316,"line_end":316,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":47021,"byte_end":47029,"line_start":327,"line_end":327,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":48063,"byte_end":48074,"line_start":364,"line_end":364,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":48341,"byte_end":48352,"line_start":375,"line_end":375,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49742,"byte_end":49748,"line_start":416,"line_end":416,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54357,"byte_end":54366,"line_start":543,"line_end":543,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58698,"byte_end":58711,"line_start":666,"line_end":666,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":63309,"byte_end":63317,"line_start":780,"line_end":780,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":70688,"byte_end":70698,"line_start":987,"line_end":987,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":72128,"byte_end":72139,"line_start":1027,"line_end":1027,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/lib.rs","byte_start":6560,"byte_end":6566,"line_start":179,"line_end":179,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":219}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/cow.rs","byte_start":7402,"byte_end":7410,"line_start":26,"line_end":26,"column_start":25,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":453},"to":{"krate":2,"index":3026}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/cow.rs","byte_start":7537,"byte_end":7545,"line_start":35,"line_end":35,"column_start":10,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":453},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/cow.rs","byte_start":8627,"byte_end":8630,"line_start":70,"line_end":70,"column_start":10,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":33661,"byte_end":33667,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":33926,"byte_end":33932,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":137},"to":{"krate":2,"index":7168}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34234,"byte_end":34240,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":137},"to":{"krate":2,"index":7032}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34589,"byte_end":34596,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":34948,"byte_end":34955,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":153},"to":{"krate":2,"index":7168}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":35273,"byte_end":35280,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":153},"to":{"krate":2,"index":7032}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":35696,"byte_end":35703,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":36131,"byte_end":36138,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":170},"to":{"krate":2,"index":7168}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memchr/iter.rs","byte_start":36504,"byte_end":36511,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":170},"to":{"krate":2,"index":7032}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":86877,"byte_end":86880,"line_start":29,"line_end":29,"column_start":10,"column_end":13},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":89677,"byte_end":89688,"line_start":93,"line_end":93,"column_start":6,"column_end":17},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":90684,"byte_end":90695,"line_start":120,"line_end":120,"column_start":27,"column_end":38},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":483},"to":{"krate":2,"index":8708}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92637,"byte_end":92646,"line_start":162,"line_end":162,"column_start":18,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":489},"to":{"krate":2,"index":2800}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":92719,"byte_end":92728,"line_start":168,"line_end":168,"column_start":6,"column_end":15},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/prefilter/mod.rs","byte_start":93992,"byte_end":94006,"line_start":199,"line_end":199,"column_start":6,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/rabinkarp.rs","byte_start":117659,"byte_end":117669,"line_start":115,"line_end":115,"column_start":6,"column_end":16},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/rabinkarp.rs","byte_start":118971,"byte_end":118975,"line_start":157,"line_end":157,"column_start":6,"column_end":10},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":516},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/rarebytes.rs","byte_start":123350,"byte_end":123365,"line_start":37,"line_end":37,"column_start":6,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":533},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":131190,"byte_end":131197,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":136880,"byte_end":136887,"line_start":244,"line_end":244,"column_start":6,"column_end":13},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":141684,"byte_end":141690,"line_start":383,"line_end":383,"column_start":6,"column_end":12},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":143778,"byte_end":143783,"line_start":429,"line_end":429,"column_start":6,"column_end":11},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":146365,"byte_end":146371,"line_start":495,"line_end":495,"column_start":6,"column_end":12},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":578},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":151514,"byte_end":151524,"line_start":623,"line_end":623,"column_start":6,"column_end":16},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/twoway.rs","byte_start":152601,"byte_end":152619,"line_start":650,"line_end":650,"column_start":6,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":605},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":46724,"byte_end":46732,"line_start":316,"line_end":316,"column_start":14,"column_end":22},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":47021,"byte_end":47029,"line_start":327,"line_end":327,"column_start":27,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":613},"to":{"krate":2,"index":7168}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":48063,"byte_end":48074,"line_start":364,"line_end":364,"column_start":14,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":48341,"byte_end":48352,"line_start":375,"line_end":375,"column_start":27,"column_end":38},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":624},"to":{"krate":2,"index":7168}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":49742,"byte_end":49748,"line_start":416,"line_end":416,"column_start":10,"column_end":16},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":54357,"byte_end":54366,"line_start":543,"line_end":543,"column_start":10,"column_end":19},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":58698,"byte_end":58711,"line_start":666,"line_end":666,"column_start":6,"column_end":19},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":63309,"byte_end":63317,"line_start":780,"line_end":780,"column_start":10,"column_end":18},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":70688,"byte_end":70698,"line_start":987,"line_end":987,"column_start":6,"column_end":16},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/andonmitev/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.4.0/src/memmem/mod.rs","byte_start":72128,"byte_end":72139,"line_start":1027,"line_end":1027,"column_start":10,"column_end":21},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":702},"to":{"krate":4294967295,"index":4294967295}}]}